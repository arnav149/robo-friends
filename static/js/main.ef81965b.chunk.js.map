{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robo","CardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredArray","this","filter","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAACC,GAEb,OACC,yBAAKC,UAAU,oDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,6BACA,4BAAKJ,EAAMK,MACX,4BAAKL,EAAMM,UCQEC,EAbE,SAAC,GACjB,IADkBC,EACnB,EADmBA,KAEZC,EAAYD,EAAKE,KAAI,SAACC,EAAKC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAMD,EAAGR,GAAII,EAAKI,GAAGR,GAAIC,KAAMG,EAAKI,GAAGP,KAAMC,MAAOE,EAAKI,GAAGN,WAGzE,OACC,6BACCG,ICAYK,EAVG,SAAC,GAClB,IADmBC,EACpB,EADoBA,aAEnB,OACC,yBAAKd,UAAU,MACT,2BAAOA,UAAU,mCAAmCe,KAAK,SAASC,YAAY,gBAAgBC,SAAWH,MCIlGI,G,MARA,SAACnB,GACd,OACE,yBAAKoB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEvB,EAAMwB,YCwCEC,E,kDArCd,aACC,IAAD,8BACC,gBAQDC,eAAiB,SAACC,GAAD,OAAW,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAPpE,EAAKC,MACL,CACCxB,KAAO,GACPqB,YAAY,IALd,E,gEAWqB,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAAEpB,KAAM6B,S,+BAI1C,IAAD,OACMC,EAAgBC,KAAKP,MAAMxB,KAAKgC,QAAO,SAAAhC,GAE3C,OAAOA,EAAKH,KAAKoC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAGjE,OACC,yBAAKxC,UAAY,MACjB,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWc,aAAgBwB,KAAKb,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,KAAO8B,U,GAhCDK,IAAMC,WCCxBC,IAASC,OACR,kBAAC,EAAD,MACEC,SAASC,eAAe,SNoHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.ef81965b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = (props)=>\n{\n\treturn(\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img alt='robots' src={`https://robohash.org/${props.id}?200x200` }/>\n\t\t<div>\n\t\t<h2>{props.name}</h2>\n\t\t<h3>{props.email}</h3>\n\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robo})=>\n{\n\tconst CardArray = robo.map((user,i)=>{\n\treturn <Card key= {i} id={robo[i].id} name={robo[i].name} email={robo[i].email} />\n    })\n\t\t\n\treturn(\n\t\t<div>\n\t\t{CardArray}\n\t\t</div>\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange})=>\n{\n\treturn(\n\t\t<div className='tc'>\n        <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange ={searchChange}/>\n        </div>\n\t\t);\n\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport './App.css';\nimport Scroll from './Scroll';\n\nclass App extends React.Component\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.state =\n\t\t{\n\t\t\trobo : [],\n\t\t\tsearchfield:''\n\t\t}\n\t}\n\n\tonSearchChange = (event) => this.setState({searchfield: event.target.value});\n\n\tcomponentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robo: users})});\n  }\n\n\trender()\n\t{\n\tconst filteredArray = this.state.robo.filter(robo =>\n\t\t{\n\t\t\treturn robo.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t});\n\t\t\t\n\treturn(\n\t\t<div className = 'tc'>\n\t\t<h1 className='f1'>Robo Friends</h1>\n\t\t<SearchBox searchChange = {this.onSearchChange} />\n\t\t<Scroll>\n\t\t<CardList robo ={filteredArray}/>\n\t\t</Scroll>\n\t\t</div>\n\t\t);\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(\n\t<App />\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}